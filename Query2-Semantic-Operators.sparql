# Autor: Francisco Edgar Castillo Barrera
#
# Copyright(c) 2021, San Luis Potosi, Mexico
#
# c:>pellet query -q Query4-Semantic-Operators.sparql OntoAtmBankProject.n3
#

PREFIX     : <http://www.ejemplo.org/#> 

SELECT DISTINCT ?PreconditionResult2 
                ?PreconditionResult1 ?PreconditionResult4
                ?PreconditionResult3 ?InvariantResult1 
                ?InvariantResult2   ?PostcondResult
WHERE    
{ ?Interface1       :hasInterfaceName ?nameinterface1 ;
                    :typeInterface :required ;
                    :hasMethod ?MethodInterface1 .
  ?MethodInterface1 :hasMethodName ?NameMethod .

  ?Interface2       :hasInterfaceName ?nameinterface2 ;
                    :typeInterface :provided ;
                    :hasMethod ?MethodInterface2 .
  ?MethodInterface2 :hasMethodName ?NameMethod .
#=========== Precondition Error ==========================# 
  OPTIONAL {                 
    ?MethodInterface1 :hasPrecond ?Pre10 .  
    ?Pre10            :hasVariableName ?Varpre1 ;
                      :hasOperator     ?Operatorpre1 ;
                      :hasVariableName2 ?Varpre12 .

    ?MethodInterface2 :hasPrecond ?Pre20 .  
    ?Pre20            :hasVariableName ?Varpre20 ;
                      :hasOperator ?Operatorpre2 ;
                      :hasVariableName2 ?Varpre2 .
  }

  OPTIONAL {
    ?MethodInterface1 :hasPrecond      ?Pre11 . 
    ?Pre11            :hasVariableName ?Varpre11 ;
                      :hasOperator     ?Operatorpre11 ;
                      :hasNumber       ?Number11 .

    ?MethodInterface2 :hasPrecond ?Pre21 .  
    ?Pre21            :hasVariableName ?Varpre21 ;
                      :hasOperator ?Operatorpre21 ;
                      :hasNumber ?Number21 .
  }

  OPTIONAL {
    ?MethodInterface1 :hasPrecond    ?Pre12 . 
    ?Pre12            :hasCallMethod ?Method12 ;
                      :hasOperator   ?Operatorpre12 ;
                      :hasConstant   ?Constant12 .

    ?MethodInterface2 :hasPrecond ?Pre22 .  
    ?Pre22            :hasCallMethod ?Method22 ;
                      :hasOperator ?Operatorpre22 ;
                      :hasConstant ?Constant22 . 
  }

  OPTIONAL {
    ?MethodInterface1 :hasPrecond      ?Pre13 . 
    ?Pre13            :hasVariableName ?Varpre13 ;
                      :hasOperator     ?Operatorpre13 ;
                      :hasConstant     ?Constant13 .

    ?MethodInterface2 :hasPrecond ?Pre23 .  
    ?Pre23            :hasVariableName ?Varpre23 ;
                      :hasOperator ?Operatorpre23 ;
                      :hasConstant ?Constant23 . 
  }
#============= Postcondition Error ==========================#
  OPTIONAL {                 
  ?MethodInterface1 :hasPostcond ?Post1 .  
  ?Post1            :hasVariableName ?Varpost1 ;
                    :hasOperator ?OperatorPost1 ;
                    :hasVariableName1 ?Varpost21 ;
                    :hasArithmeticOperator ?OperSign1 ;
                    :hasVariableName2 ?Varpost3 .

  ?MethodInterface2 :hasPostcond ?Post2 .  
  ?Post2            :hasVariableName ?Varpost2 ;
                    :hasOperator ?OperatorPost2 ;
                    :hasVariableName1 ?Varpost22 ;
                    :hasArithmeticOperator ?OperSign2 ;
                    :hasVariableName2 ?Varpost32 .
  }
#============= Invariant Error =============================#
OPTIONAL {                 
   ?MethodInterface1 :hasInvariant  ?Invariant1 .
   ?Invariant1       :hasCallMethod ?CallMethod1 ;
                     :hasOperator   ?OperatorInv1 ;
                     :hasNumber     ?NumberInv1 .   
  
   ?MethodInterface2 :hasInvariant  ?Invariant2 .
   ?Invariant2       :hasCallMethod ?CallMethod2 ;
                     :hasOperator   ?OperatorInv2 ;
                     :hasNumber     ?NumberInv2 .
 }
 OPTIONAL {   
    ?Interface1       :hasInvariant   ?Invariant11 . 
    ?Invariant11      :hasCallMethod  ?CallMethod11 ;
                      :hasOperator    ?OperatorInv11 ;
                      :hasCallMethod2 ?CallMethod111 .

    ?Interface2       :hasInvariant   ?Invariant22 .
    ?Invariant22      :hasCallMethod  ?CallMethod22 ;
                      :hasOperator    ?OperatorInv22 ;
                      :hasCallMethod2 ?CallMethod222 .   
 } 
#----------------------------------------------------------  
 BIND( if( ?CallMethod11 != ?CallMethod22 || ?OperatorInv11 != ?OperatorInv22 
           || ?CallMethod111 != ?CallMethod222, 
          "Invariant mismatch error!\n"+
          "required "+ ?CallMethod11 +" "+ ?OperatorInv11 +" "+ 
           ?CallMethod111+"\n"+ "provided "+ ?CallMethod22 +
           " "+ ?OperatorInv22 +" "+ ?CallMethod222, 
           "Invariant matching case 1 ok!\n"+ "   required "+ ?CallMethod11 +" "+ 
           ?OperatorInv11 +" "+ ?CallMethod111+"\n"+ "   provided "+ ?CallMethod22 +
           " "+ ?OperatorInv22 +" "+ ?CallMethod222+"\n") AS ?InvariantResult1 )

 BIND( if( ?CallMethod1 != ?CallMethod2 || ?OperatorInv1 != ?OperatorInv2 || 
           ( ?OperatorInv1 =">" && ?OperatorInv2 =">" && ?NumberInv1 >
             ?NumberInv2 ) , "Invariant mismatch error! \n"+ "required "+
            ?CallMethod1 +" "+ ?OperatorInv1 +" "+ str(?NumberInv1)+
           "\n"+ "provided "+ ?CallMethod2 +  " "+ ?OperatorInv2 + 
           " "+ str(?NumberInv2), "Invariant matching case 2 ok!\n"+"   required "+ 
           ?CallMethod1 +" "+ ?OperatorInv1 +" "+ str(?NumberInv1)+"\n" 
           + "   provided "+ ?CallMethod2 + " "+ ?OperatorInv2 + " "+ 
            str(?NumberInv2)+"\n" ) AS ?InvariantResult2 ) 
    
 BIND( if( ?Varpost1 != ?Varpost2 || ?OperatorPost1 != ?OperatorPost2 
        || ?Varpost21 != ?Varpost22 ||?OperSign1 != ?OperSign2 || 
           ?Varpost3 != ?Varpost32 , "Postcondition mismatch error:\n"   
         +"Required "+?nameinterface1+"."+
          ?NameMethod+" Post: "+ ?Varpost1 +?OperatorPost1 +
          ?Varpost21 + ?OperSign1 + ?Varpost3+ "\n" + "Provided " +
          ?nameinterface2+"."+ ?NameMethod+" Post: "+ ?Varpost2+
          ?OperatorPost2 + ?Varpost22 +
          ?OperSign2 + ?Varpost32 + "\n\n","Postcondition matching ok!\n"+
         "   required "+ ?Varpost1 +?OperatorPost1 +
          ?Varpost21 + ?OperSign1 + ?Varpost3+ "\n" + "   provided " +
          ?Varpost2 + ?OperatorPost2 + ?Varpost22 + ?OperSign2 + ?Varpost32+"\n") 
          AS ?PostcondResult ) 

 BIND( if( ?Varpre1  != ?Varpre20 || ( ?Operatorpre1 != ?Operatorpre2 &&
        ?OperatorInv1 = ">=" && ?OperatorInv2 = ">" ) || ?Varpre12 != ?Varpre2, 
          "Precondition mismatch error:\n" + "required " + ?Varpre1 + 
          ?Operatorpre1 + ?Varpre12 + "\n" + "provided " + ?Varpre20 + 
          ?Operatorpre2 + ?Varpre2+"\n", 
          "Precondition matching case 1 ok!\n"+"  required " + ?Varpre1 + 
          ?Operatorpre1 + ?Varpre12 + "\n" + "   provided " + ?Varpre20 + 
          ?Operatorpre2 + ?Varpre2 +"\n" ) AS ?PreconditionResult1 )

 BIND( if( ?Varpre11 != ?Varpre21 || ?Operatorpre11 !=
            ?Operatorpre21 || str(?Number11) != str(?Number21),
           "Precondition mismatch error:\n" + "required "+
           ?Varpre11+ ?Operatorpre11 + str(?Number11) + "\n" +   
           "provided " + ?Varpre21 + ?Operatorpre21 + str(?Number21)+"\n",
           "Precondition matching case 2 ok!\n" + "   required "+
           ?Varpre11+ ?Operatorpre11 + str(?Number11) + "\n" +   
           "   provided " + ?Varpre21 + ?Operatorpre21 + str(?Number21)+"\n"
           ) AS ?PreconditionResult2 )

 BIND( if( ?Method12 != ?Method22 ||?Operatorpre12 != ?Operatorpre22 || 
           ?Constant12 != ?Constant22,
         "Precondition mismatch error:\n" + 
         "required "+ ?Method12 + ?Operatorpre12 + ?Constant12 
       + "\n" + "   provided "+?Method22 + ?Operatorpre22 +
         ?Constant22 + "\n", "Precondition matching case 3 ok!\n"+
         "   required "+ ?Method12 + ?Operatorpre12 + ?Constant12 
       + "\n" + "   provided "+?Method22 + ?Operatorpre22 +
         ?Constant22+"\n" ) AS ?PreconditionResult3 )

   BIND( if( ?Varpre13 !=  ?Varpre23 || ?Operatorpre13 != ?Operatorpre23 || 
            ?Constant13 != ?Constant23,
            "Precondition mismatch error:\n" + 
            "Required "+ ?Varpre13 +" "+ ?Operatorpre13 +" "+ ?Constant13 + 
            "\n" +  "Provided  "+ ?Varpre23 +" "+ ?Operatorpre23 +" "+
            ?Constant23,"Precondition matching case 4 ok!\n"+
            "   required "+ ?Varpre13 +" "+ ?Operatorpre13 +" "+ ?Constant13 + 
            "\n" +  "   provided  "+ ?Varpre23 +" "+ ?Operatorpre23 +" "+
            ?Constant23+"\n") AS ?PreconditionResult4 )
} 