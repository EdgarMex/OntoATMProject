# Autor: Francisco Edgar Castillo Barrera
#
# Copyright(c) 2020
#
# c:>pellet query -q queryprepostinvar_plus.sparql proyectonto.n3
#

PREFIX     : <http://www.ejemplo.org/#> 

SELECT DISTINCT ?ErrorMessages  
WHERE    
{ ?Interface1       :hasInterfaceName ?nameinterface1 ;
                    :typeInterface :required ;
                    :hasMethod ?MethodInterface1 .
  ?MethodInterface1 :hasMethodName ?NameMethod .

  ?Interface2       :hasInterfaceName ?nameinterface2 ;
                    :typeInterface :provided ;
                    :hasMethod ?MethodInterface2 .
  ?MethodInterface2 :hasMethodName ?NameMethod .
#=========== Precondition Error ==========================# 
  OPTIONAL {                 
  ?MethodInterface1 :hasPrecond ?Pre10 .  
  ?Pre10            :hasVariableName ?Varpre1 ;
                    :hasOperator     ?Operatorpre1 ;
                    :hasVariableName2 ?Varpre12 .

  ?MethodInterface1 :hasPrecond ?Pre11 . 
  ?Pre11            :hasVariableName ?Varpre11 ;
                    :hasOperator     ?Operatorpre11 ;
                    :hasConstant ?Constant11 .

  ?MethodInterface1 :hasPrecond ?Pre12 . 
  ?Pre12            :hasCallMethod ?Method12 ;
                    :hasOperator   ?Operatorpre12 ;
                    :hasConstant ?Constant12 .

  ?MethodInterface2 :hasPrecond ?Pre20 .  
  ?Pre20            :hasVariableName ?Varpre20 ;
                    :hasOperator ?Operatorpre2 ;
                    :hasVariableName2 ?Varpre2 .

  ?MethodInterface2 :hasPrecond ?Pre21 .  
  ?Pre21            :hasVariableName ?Varpre21 ;
                    :hasOperator ?Operatorpre21 ;
                    :hasConstant ?Constant21 .

  ?MethodInterface2 :hasPrecond ?Pre22 .  
  ?Pre22            :hasCallMethod ?Method22 ;
                    :hasOperator ?Operatorpre22 ;
                    :hasConstant ?Constant22 .
  }
#============= Postcondition Error ==========================#
  OPTIONAL {                 
  ?MethodInterface1 :hasPostcond ?Post1 .  
  ?Post1            :hasVariableName ?Varpost1 ;
                    :hasOperator ?OperatorPost1 ;
                    :hasVariableName1 ?Varpost21 ;
                    :hasArithmeticOperator ?OperSign1 ;
                    :hasVariableName2 ?Varpost3 .

  ?MethodInterface2 :hasPostcond ?Post2 .  
  ?Post2            :hasVariableName ?Varpost2 ;
                    :hasOperator ?OperatorPost2 ;
                    :hasVariableName1 ?Varpost22 ;
                    :hasArithmeticOperator ?OperSign2 ;
                    :hasVariableName2 ?Varpost32 .
  }
#============= Invariant Error =============================#
  OPTIONAL {                 
  ?MethodInterface1 :hasInvariant ?Invariant1 .
                   
  ?Invariant1       :hasCallMethod ?CallMethod1 ;
                    :hasOperator  ?OperatorInv1 ;
                    :hasNumber ?NumberInv1 .
  
  ?MethodInterface2 :hasInvariant  ?Invariant2 .
                       
  ?Invariant2       :hasCallMethod ?CallMethod2 ;
                    :hasOperator   ?OperatorInv2 ;
                    :hasNumber ?NumberInv2 .
  }

  BIND( if( ?CallMethod1 = ?CallMethod2, 
           if( str(?NumberInv2) != str(?NumberInv1) && (?OperatorInv1 = "==" || ?OperatorInv1 = "<>"), 
           "Different Invariant Error:\n"+"Required "+?nameinterface1+"."+?NameMethod+" Inv: "+?CallMethod1 + 
           ?OperatorInv1 + str(?NumberInv1) + "\n" + "Provided "+?nameinterface2+"."+?NameMethod+" Inv: "+?CallMethod2 + 
           ?OperatorInv2 + str(?NumberInv2) + "\n\n", if( (?OperatorInv1 = ">" && ?OperatorInv2 = ">") &&
           ?NumberInv2 > ?NumberInv1, "Invariant Semantic Matching\n"+"Required "+?nameinterface1+"."+?NameMethod+" Inv: "+
           ?CallMethod1 + ?OperatorInv1 + str(?NumberInv1) + "\n" + "Provided " + ?nameinterface2+"."+?NameMethod+" Inv: "+
           ?CallMethod2 + ?OperatorInv2 + str(?NumberInv2) + "\n\n" , if( (?OperatorInv1 = "<" && ?OperatorInv2 = "<") && 
           ?NumberInv2 < ?NumberInv1, "Invariant \nPerfect Semantic Match \n", if( (?OperatorInv1 = ">=" && ?OperatorInv2 = ">") && 
           ?NumberInv2 > ?NumberInv1, "Invariant \nPerfect Semantic Match \n", if( (?OperatorInv1 = "<=" && ?OperatorInv2 = "<") && 
           ?NumberInv2 <= ?NumberInv1,"Invariant \nPerfect Semantic Match \n","Invariant Matching Impossible! \n" ) ) ) ) ),"") AS
           ?ErrorInvariant )

  BIND( if( ?Varpost1 != ?Varpost2 || ?OperatorPost1 != ?OperatorPost2 || ?Varpost21 != ?Varpost22 ||
           ?OperSign1 != ?OperSign2 || ?Varpost3 != ?Varpost32 , 
          "Different Postcondition Error:\n"+"Required "+?nameinterface1+"."+?NameMethod+" Post: "+ 
           ?Varpost1 +?OperatorPost1 +?Varpost21 + ?OperSign1 + ?Varpost3+ "\n" + "Provided " +
           ?nameinterface2+"."+ ?NameMethod+" Post: "+ ?Varpost2+?OperatorPost2+?Varpost22+
           ?OperSign2 + ?Varpost32 + "\n\n","") AS ?ErrorPostcond ) 

 BIND( if( ?Varpre1 !=  ?Varpre20 ||  ?Operatorpre1 != ?Operatorpre2|| ?Varpre12 != ?Varpre2,
           "Different Precondition Error:\n" + "Required "+?nameinterface1+"."+ ?NameMethod +" Pre: "+ ?Varpre1+
            ?Operatorpre1 + ?Varpre12 + "\n" + "Provided " +?nameinterface2+"."+?NameMethod +" Pre: "+ ?Varpre20 + 
               ?Operatorpre2 + ?Varpre2 + "\n\n","") AS ?ErrorPrecondition1 )

 BIND( if( ?Varpre11 =  ?Varpre21 ||  ?Operatorpre11 = ?Operatorpre21 || ?Constant11 = 
           ?Constant21,  "Perfect Precondition:\n" + "Required "+?nameinterface1+"."+ ?NameMethod +
           " Pre: "+ ?Varpre11+ ?Operatorpre11 + ?Constant11 + "\n" + "Provided " + ?nameinterface2+"."+
           ?NameMethod +" Pre: "+ ?Varpre21 + ?Operatorpre21 + ?Constant21 + "\n\n","") AS ?ErrorPrecondition2 )
 
 BIND( if( ?Method12 = ?Method22 ||  ?Operatorpre12 = ?Operatorpre22 || ?Constant12 = 
           ?Constant22,  "Perfect Precondition:\n" + "Required "+?nameinterface1+"."+ ?NameMethod +
           " Pre: "+ ?Method12+ ?Operatorpre12 + ?Constant12 + "\n" + "Provided " + ?nameinterface2+"."+
           ?NameMethod +" Pre: "+ ?Method22 + ?Operatorpre22 + ?Constant22 + "\n\n","") AS ?ErrorPrecondition3 )

 BIND( ?ErrorInvariant + ?ErrorPostcond + ?ErrorPrecondition1 + ?ErrorPrecondition2 + 
       ?ErrorPrecondition3 AS ?ErrorMessages)  
} 